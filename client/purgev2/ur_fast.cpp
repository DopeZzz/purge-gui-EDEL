#include "ur_fast.h"
#include <cstring>

static bool send_buffer(SOCKET s, const uint8_t* buf, size_t len)
{
    size_t sent = 0;
    while (sent < len) {
        int n = ::send(s, reinterpret_cast<const char*>(buf + sent),
            static_cast<int>(len - sent), 0);
        if (n <= 0) return false;
        sent += n;
    }
    return true;
}
URClient::URClient()
{
    WSADATA wsa{};
    if (WSAStartup(MAKEWORD(2, 2), &wsa) == 0)
        wsaInitialized_ = true;
}

URClient::~URClient()
{
    disconnect();
    if (wsaInitialized_)
        WSACleanup();
}

bool URClient::sendAll(const uint8_t* d, size_t n) { return send_buffer(sock, d, n); }

bool URClient::connect(const char* host, uint16_t port)
{
    sock = ::socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (sock == INVALID_SOCKET) return false;

    BOOL flag = TRUE;
    setsockopt(sock, IPPROTO_TCP, TCP_NODELAY,
        reinterpret_cast<char*>(&flag), sizeof(flag));

    sockaddr_in sin{};  sin.sin_family = AF_INET;
    inet_pton(AF_INET, host, &sin.sin_addr);
    sin.sin_port = htons(port);
    return ::connect(sock, reinterpret_cast<sockaddr*>(&sin),
        sizeof(sin)) == 0;
}
void URClient::disconnect()
{
    if (sock != INVALID_SOCKET) {
        closesocket(sock);
        sock = INVALID_SOCKET;
    }
}

static const uint8_t HELLO[] = {
0x00,0x00,0x00,0xC4,0x00,0x01,0x08,0x41,0x63,0x74,0x69,0x6F,0x6E,0x00,0x01,0x05,
0x50,0x61,0x73,0x73,0x77,0x6F,0x72,0x64,0x00,0x34,0x39,0x34,0x37,0x39,0x66,0x33,
0x36,0x32,0x65,0x61,0x33,0x32,0x35,0x38,0x63,0x33,0x37,0x62,0x37,0x30,0x38,0x39,
0x30,0x36,0x38,0x37,0x31,0x35,0x32,0x31,0x66,0x38,0x33,0x38,0x34,0x65,0x37,0x35,
0x62,0x33,0x37,0x35,0x37,0x30,0x38,0x38,0x36,0x62,0x38,0x65,0x63,0x39,0x34,0x30,
0x34,0x36,0x66,0x66,0x32,0x38,0x38,0x66,0x61,0x00,0x02,0x43,0x61,0x70,0x61,0x62,
0x69,0x6C,0x69,0x74,0x69,0x65,0x73,0x00,0x04,0x41,0x63,0x74,0x69,0x6F,0x6E,0x73,
0x00,0x01,0x04,0x53,0x79,0x6E,0x63,0x00,0x01,0x04,0x47,0x72,0x69,0x64,0x00,0x01,
0x04,0x46,0x61,0x73,0x74,0x00,0x00,0x04,0x4C,0x6F,0x61,0x64,0x69,0x6E,0x67,0x00,
0x01,0x04,0x45,0x6E,0x63,0x72,0x79,0x70,0x74,0x69,0x6F,0x6E,0x32,0x00,0x01,0x00,
0x05,0x53,0x6F,0x75,0x72,0x63,0x65,0x00,0x69,0x6F,0x73,0x2D,0x61,0x33,0x38,0x31,
0x35,0x31,0x65,0x32,0x64,0x66,0x38,0x65,0x31,0x31,0x37,0x37,0x00,0x08,0x52,0x65,
0x71,0x75,0x65,0x73,0x74,0x00,0x03,0x00
};

static const uint8_t PART_F[] = {
0x00,0x00,0x00,0xFB,0x00,0x01,0x05,0x49,0x44,0x00,0x43,0x6F,0x72,0x65,0x2E,0x49,
0x6E,0x70,0x75,0x74,0x00,0x08,0x41,0x63,0x74,0x69,0x6F,0x6E,0x00,0x07,0x02,0x4C,
0x61,0x79,0x6F,0x75,0x74,0x00,0x06,0x43,0x6F,0x6E,0x74,0x72,0x6F,0x6C,0x73,0x00,
0x02,0x00,0x08,0x54,0x79,0x70,0x65,0x00,0x08,0x02,0x4F,0x6E,0x41,0x63,0x74,0x69,
0x6F,0x6E,0x00,0x05,0x4E,0x61,0x6D,0x65,0x00,0x4D,0x6F,0x76,0x65,0x42,0x79,0x00,
0x02,0x45,0x78,0x74,0x72,0x61,0x73,0x00,0x06,0x56,0x61,0x6C,0x75,0x65,0x73,0x00,
0x02,0x00,0x05,0x4B,0x65,0x79,0x00,0x58,0x00,0x05,0x56,0x61,0x6C,0x75,0x65,0x00
};
static const uint8_t PART_G[] = {
0x00,0x00,0x02,0x00,0x05,0x4B,0x65,0x79,0x00,0x59,0x00,0x05,0x56,0x61,0x6C,0x75,
0x65,0x00
};
static const uint8_t PART_H[] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x53,0x6F,0x75,0x72,0x63,0x65,0x00,
0x69,0x6F,0x73,0x2D,0x61,0x33,0x38,0x31,0x35,0x31,0x65,0x32,0x64,0x66,0x38,0x65,
0x31,0x31,0x37,0x37,0x00,0x08,0x52,0x65,0x71,0x75,0x65,0x73,0x74,0x00,0x07,0x02,
0x52,0x75,0x6E,0x00,0x05,0x4E,0x61,0x6D,0x65,0x00,0x4D,0x6F,0x76,0x65,0x42,0x79,
0x00,0x02,0x45,0x78,0x74,0x72,0x61,0x73,0x00,0x06,0x56,0x61,0x6C,0x75,0x65,0x73,
0x00,0x02,0x00,0x05,0x4B,0x65,0x79,0x00,0x58,0x00,0x05,0x56,0x61,0x6C,0x75,0x65,
0x00
};
static const uint8_t PART_I[] = {
0x00,0x00,0x02,0x00,0x05,0x4B,0x65,0x79,0x00,0x59,0x00,0x05,0x56,0x61,0x6C,0x75,
0x65,0x00
};

bool URClient::hello() { return sendAll(HELLO, sizeof(HELLO)); }

bool URClient::move(int dx, int dy)
{
    std::string sx = std::to_string(dx);
    std::string sy = std::to_string(dy);

    std::vector<uint8_t> pkt;
    pkt.reserve(sizeof(PART_F) + sx.size() + sizeof(PART_G) + sy.size() +
        sizeof(PART_H) + sx.size() + sizeof(PART_I) + sy.size() + 6);

    pkt.insert(pkt.end(), std::begin(PART_F), std::end(PART_F));
    pkt.insert(pkt.end(), sx.begin(), sx.end());
    pkt.insert(pkt.end(), std::begin(PART_G), std::end(PART_G));
    pkt.insert(pkt.end(), sy.begin(), sy.end());
    pkt.insert(pkt.end(), std::begin(PART_H), std::end(PART_H));
    pkt.insert(pkt.end(), sx.begin(), sx.end());
    pkt.insert(pkt.end(), std::begin(PART_I), std::end(PART_I));
    pkt.insert(pkt.end(), sy.begin(), sy.end());

    pkt.resize(pkt.size() + 6, 0x00);

    uint32_t n = htonl(static_cast<uint32_t>(pkt.size() - 4));
    memcpy(pkt.data(), &n, 4);

    return sendAll(pkt.data(), pkt.size());
}


